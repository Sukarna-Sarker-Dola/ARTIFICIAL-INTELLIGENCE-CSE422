# -*- coding: utf-8 -*-
"""7_19301201_SukarnaSarker.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aYLyozRs8DTLL3GKQZ9EfXyGj0iNst8O
"""

import random
import math


def functions(place,deepness,condition,alpha,beta,arms ):
  if deepness == 0:
    completed[place]=1
    return arrr[place]
  if condition == True:
    v=-math.inf
    for j in range(0,arms):
      val=functions(place*arms+j,deepness-1,False,alpha,beta,arms)
      v=max(v,val)
      alpha=max(alpha,val)
      if alpha>=beta:
        break
    return v
  
  else:
    v=math.inf
    for j in range(0,arms):
      val=functions(place*arms+j,deepness-1,True,alpha,beta,arms)
      v=min(v,val)
      beta=min(beta,val)
      if alpha>=beta:
        break
    return v
print("Inputs:")
n = int(input("Enter your StudentID: "))
ID = [int(a) for a in str(n)]

turn=int(ID[0])
depth=int(turn*2)
arms=ID[2]

id_length=len(ID)
lasttwodigits=[]

lastdigit=ID[id_length-1]
lasttwodigits.append(lastdigit)

secondlastdigit=ID[id_length-2]
lasttwodigits.append(secondlastdigit)

s = [str(integer) for integer in lasttwodigits]
string = "".join(s)
startinglifeline = int(string)

second_line = str(input("Enter minimum and maximum(give a space between minimum and maximum): "))
line=second_line.split()

lf =arms**depth

arrr=[]
mini=line[0]
maxi=line[1]
a = int(mini)
b = int(maxi)
for t in range(0,lf):
  arrr.append(random.randint(a, b))

completed=[0]*lf


alpha=-math.inf
beta=math.inf

hpleft = functions(0,depth,True,alpha,beta,arms)
liferemains=startinglifeline-hpleft
print("Outputs:")
print("Depth and Branches ratio is",depth,":",arms)
print("Terminal States (leaf node values) are",arrr)
print("Left life(HP) of the defender after maximum damage caused by the attacker is",liferemains)

count=0
for m in range(0,len(completed)):
  if completed[m]==1:
    count=count+1  
print("After Alpha-Beta Pruning Leaf Node Comparisons",count)