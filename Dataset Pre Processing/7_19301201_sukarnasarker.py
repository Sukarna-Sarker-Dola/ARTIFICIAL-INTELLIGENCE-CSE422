# -*- coding: utf-8 -*-
"""7_19301201_SukarnaSarker.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hK9KwSOnGDCfzoi-MEy-2IFj-wuLQUCY
"""

# -*- coding: utf-8 -*-
"""7_19301201_SukarnaSarker.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TlQIMgMZSZuvLsXY4nE0bFQN1n4bC1DB
"""

import pandas as pd
import numpy as np
import sklearn
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.datasets import load_breast_cancer

#loading dataset
income=pd.read_csv('/content/sample_data/Income Dataset (50k).csv')

#total null values per column
income.isnull().sum() 
#Handling missing values by replacing NULL values with string "NUll" 
income=income.fillna("NUll")

#encoding categorical features
income['workclass'].unique() 
enccc = LabelEncoder()
income['workclass'] = enccc.fit_transform(income['workclass'])


income['occupation'].unique() 
encc = LabelEncoder()
income['occupation'] = encc.fit_transform(income['occupation'])


income['native-country'].unique()
enc = LabelEncoder()
income['native-country'] = enc.fit_transform(income['native-country'])


income['gender'].unique() 
enjj = LabelEncoder()
income['gender'] = enjj.fit_transform(income['gender'])


income['race'].unique() 
enjjj = LabelEncoder()
income['race'] = enjjj.fit_transform(income['race'])


income['relationship'].unique() 
enjk = LabelEncoder()
income['relationship'] = enjk.fit_transform(income['relationship'])


income['marital-status'].unique() 
enjkk = LabelEncoder()
income['marital-status'] = enjkk.fit_transform(income['marital-status'])


income['education'].unique() 
enjkkk = LabelEncoder()
income['education'] = enjkkk.fit_transform(income['education'])


#scaling all the values between 0-1 with proper scaling technique
from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()

scaler.fit(income)
X_train_scaled = scaler.transform(income)
print(X_train_scaled)

#here income>=50k indicates the labels.
x, y = income.iloc[:, :-1], income.iloc[:, [-1]]
X_train, X_test, y_train, y_test = train_test_split(x, y,
random_state=1)

print(x.shape)
print(y.shape)